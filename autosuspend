#!/usr/bin/env python3
# coding: utf-8

import sys
import logging
import argparse
from subprocess import call, DEVNULL
from time import time, sleep, ctime
from os import walk, access, X_OK, chdir
from os.path import join, dirname, isdir
from re import compile as re_compile

if __name__ != '__main__':
  raise NotImplementedError(
      "This is module should only be called directly from command line."
  )

NUMERIC_RE = re_compile(r'[0-9]+')

####################
# functions
#

def _call(*call_args, **call_kwargs):

  call_kwargs = {}
  if args.quiet:
    call_kwargs['stdout'] = DEVNULL

  return call(*call_args, **call_kwargs)

def call_dispatcher(executable):
  return _call((executable, args.interface,))

def get_executables(directories):
  executables = []
  for directory in directories:
    if not isdir(directory):
      continue
    for root, _, files in walk(directory):
      for filename in files:
        script = join(root, filename)
        if access(script, X_OK):
          executables.append(script)

  def numericindex(string):
    match = NUMERIC_RE.search(string)
    if match:
      return match.group(0)
    return 0

  executables.sort(key=numericindex)

  import pdb
  pdb.set_trace()

  return executables

def dispatch_pre():
  for executable in get_executables(DISPATCHERS_DIRS_PRE):
    logging.info("running '%s' as a pre dispatcher", executable)
    if call_dispatcher(executable):
      logging.info("'%s' returned non-zero exit code!", executable)
      return False
  return True

def dispatch_post():
  for executable in get_executables(DISPATCHERS_DIRS_POST):
    logging.info("running '%s' as a post dispatcher", executable)
    call_dispatcher(executable)

def try_to_sleep():

  def _sleep_autodetect():

    logging.debug("try to suspend via systemd")
    if _call(['systemctl', 'suspend']):
      return True

    logging.debug("try to suspend via pm-suspend")
    if _call(['pm-suspend']):
      return True

    logging.debug("try to suspend via /sys/power/state")
    if _call(['echo mem > /sys/power/state'], shell=True):
      return True

    logging.critical("No suspend mechanism worked!")

  if not dispatch_pre():
    return False

  if args.sleep_cmd:
    _call([args.sleep_cmd], shell=True)
  else:
    _sleep_autodetect()

  dispatch_post()
  return True

def get_packets():
  packet_fields = [2, 10]
  file = open("/proc/net/dev", 'r')
  lines = file.readlines()
  file.close()
  lines.reverse()
  for line in lines:
    if args.interface in line:
      line = line.replace(":", " ")
      line = line.split()
      packet_counts = [int(line[i]) for i in packet_fields]
      return sum(packet_counts)


####################
# CLI args.interface
#
parser = argparse.ArgumentParser(
    description="This script suspends your computer on few network activity.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
parser.add_argument('-t', '--timeout', type=int, default=1800,
                    help='How many seconds must the network be idle?')
parser.add_argument('-i', '--interval', type=int, default=60,
                    help='How many seconds to sleep between measurements?')
parser.add_argument('-s', '--threshold', type=int, default=2500,
                    help='Amount of packages to consider the interface as active.')
parser.add_argument('-c', '--sleep_cmd', type=str,
                    help=('The executable to call to suspend the machine. '
                          'If unset, try to suspend via (in that order): '
                          'systemd, pm-suspend, kernel)'))
parser.add_argument('-d', '--debug', action='store_true', default=False,
                    help='Print debug output?')
parser.add_argument('-q', '--quiet', action='store_true', default=False,
                    help='Be quiet?')
parser.add_argument('interface', type=str,
                    help='Use which interface to determine network activity?')
args = parser.parse_args()


####################
# main program
#
DISPATCHERS_DIRS_PRE = (
    "/etc/autosuspend/autosuspend.pre/",
    "./autosuspend.pre/",
)
DISPATCHERS_DIRS_POST = (
    "/etc/autosuspend/autosuspend.post/",
    "./autosuspend.post/",
)

logging.getLogger().name = "autosuspend"

logging.getLogger().setLevel(logging.INFO)
if args.debug:
  logging.getLogger().setLevel(logging.DEBUG)

if args.quiet:
  logging.getLogger().setLevel(logging.WARN)

logging.info(
    "Will sleep after network activity less than %i packets in %i seconds on %s",
    args.threshold, args.timeout, args.interface
)

chdir(dirname(sys.argv[0]) or '.')

measurements = []
while True:
  time_now = time()
  packets_now = get_packets()

  if packets_now is None:
    logging.critical(
        "Could not determine packet count for '%s'", args.interface
    )
    logging.critical("Is this properly configured?")
    exit(1)

  measurements.append((time_now, packets_now))
  logging.debug("%i packets at %s", packets_now, ctime(time_now))

  for measurement in measurements[:]:
    measurement_time = measurement[0]
    measurement_packets = measurement[1]

    active = (packets_now - measurement_packets) > args.threshold
    expired = (time_now - measurement_time) > args.timeout

    if active:
      logging.debug("Activity - deleting record (%s => %i)",
                    ctime(measurement_time), measurement_packets)
      measurements.remove(measurement)
      continue

    if not expired:
      break
    else:
      logging.info("Not enough activity since %s! Try to sleep...",
                   ctime(measurement_time))
      measurements.remove(measurement)
      if try_to_sleep():
        logging.info("Sleep was successful! Resetting...")
        measurements = []
        break
  sleep(args.interval)

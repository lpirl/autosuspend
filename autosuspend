#!/bin/sh
''':'
INTERPRETERS="pypy3 python3"
for c in $INTERPRETERS
do
  command -v $c >/dev/null 2>&1 || continue
  exec $c -OO "$0" "$@"
done
echo "no Python interpreter found (tried: $INTERPRETERS)"
exit 255
'''

# coding: utf-8

__doc__ = '''
This script suspends your computer on few network activity.
'''

import sys
import logging
import argparse
from subprocess import call, DEVNULL
from time import time, sleep, ctime
from os import walk, access, X_OK, chdir
from os.path import join, dirname, isdir, basename
from re import compile as re_compile
from configparser import ConfigParser
from collections import deque
from math import ceil

NUMERIC_RE = re_compile(r'^[0-9]+')

DISPATCHERS_DIRS_PRE = (
    "/etc/autosuspend/autosuspend.pre/",
    "./autosuspend.pre/",
)
DISPATCHERS_DIRS_POST = (
    "/etc/autosuspend/autosuspend.post/",
    "./autosuspend.post/",
)

SUSPEND_COMMANDS = (
  ('pm-suspend',),
  ('systemctl', 'suspend'),
  ('sh', '-c', 'echo mem > /sys/power/state'),
)

# you see the defaults here; this dictionary will be updated with the
# contents from the INI file and command line arguments (in order)
CONFIG = {
  'timeout': 3700,
  'interval': 59,
  'threshold': 5000,
  'suspend_cmd': 'auto',
  'debug': False,
  'quiet': False,
  'interface': 'auto',
}


def update_config_from_ini_file():
  '''
  reads configuration options from INI file and updates ``CONFIG``
  accordingly
  '''
  config_parser = ConfigParser()
  config_parser.read('autosuspend.ini')
  ini_config = config_parser['autosuspend']

  # You might wonder why we do not need to convert the data types. This
  # is because we feed the values read from the INI file in the
  # ArgumentParser which does the job for us.

  CONFIG.update(ini_config)


def update_config_from_args():
  '''
  configures command line arguments, parses them, and updates ``CONFIG``
  accordingly
  '''

  args_parser = argparse.ArgumentParser(
    description=__doc__,
    epilog='Command-line options have preference over INI file options.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  args_parser.add_argument(
    '-t', '--timeout', type=int,
    default=CONFIG['timeout'],
    help='How many seconds must the network be idle?',
  )
  args_parser.add_argument(
    '-i', '--interval', type=int, default=CONFIG['interval'],
    help='How many seconds to sleep between measurements?'
  )
  args_parser.add_argument(
    '-s', '--threshold', type=int, default=CONFIG['threshold'],
    help='Amount of packages to consider the interface ' 'as active.'
  )
  args_parser.add_argument(
    '-c', '--suspend-cmd', type=str, default=CONFIG['suspend_cmd'],
    help=('The executable to call to suspend the machine. If unset, try '
          'to suspend via (in that order): systemd, pm-suspend, kernel)')
  )
  args_parser.add_argument(
    '-d', '--debug', action='store_true', default=CONFIG['debug'],
    help='Print debug output?'
  )
  args_parser.add_argument(
    '-q', '--quiet', action='store_true', default=CONFIG['quiet'],
    help='Be quiet?'
  )
  args_parser.add_argument(
    'interface', type=str, nargs='?', default=CONFIG['interface'],
    help='Use which interface to determine network activity?')

  args_config = args_parser.parse_args()

  CONFIG.update(args_config.__dict__)


def setup_logging():
  ''' configures the logger with a name, the log level, etc. '''
  logger = logging.getLogger()
  logger.name = "autosuspend"
  logger.setLevel(logging.INFO)

  if CONFIG['debug'] and CONFIG['quiet']:
    logging.critical('You cannot set both options, "quiet" and "debug"; '
                     'please check your configuration')
    sys.exit(1)

  if CONFIG['debug']:
    logger.setLevel(logging.DEBUG)
  if CONFIG['quiet']:
    logger.setLevel(logging.WARN)


def detect_interface():
  '''
  sets the name of the interface which is used for the default route;
  exits the program with an error message if this cannot be determined
  '''
  with open("/proc/net/route", encoding="utf-8") as route_file:
    for line in route_file:
      name, dest, _, flags, _ = line.strip().split(maxsplit=4)
      if dest != '00000000':
        continue
      if not int(flags, 16) & 2:
        continue
      CONFIG['interface'] = name
      return
  logging.critical("Could not determine default network interface; "
                   "you may consider configuring it manually.")
  sys.exit(1)

def _call(*call_args, **call_kwargs):
  '''
  wrapper for everything we call externally in order to mute stdout if
  we are asked to be quiet
  '''

  call_kwargs = {}
  if CONFIG['quiet']:
    call_kwargs['stdout'] = DEVNULL

  return call(*call_args, **call_kwargs)


def call_dispatcher(executable):
  '''
  calls a single dispatcher with the (either configured or automatically
  detected) network interface as first argument
  '''
  return _call((executable, CONFIG['interface'],))


def get_executables(directories):
  '''
  returns an ordered list of executable files which are present in the
  specified directories
  '''
  executables = []
  for directory in directories:
    if not isdir(directory):
      continue
    for root, _, files in walk(directory):
      for filename in files:
        script = join(root, filename)
        if access(script, X_OK):
          executables.append(script)

  def numericindex(string):
    '''
    returns leading digits of ``string`` and ``0`` if there are none
    '''
    match = NUMERIC_RE.search(basename(string))
    if match:
      return int(match.group(0))
    return 0

  executables.sort(key=numericindex)
  return executables


def dispatch_pre():
  '''
  runs the pre-suspend dispatchers, one after the other, returns
  ``False`` once a dispatcher does not succeed, ``True`` otherwise
  '''
  for executable in get_executables(DISPATCHERS_DIRS_PRE):
    logging.info("running '%s' as a pre dispatcher", executable)
    if call_dispatcher(executable):
      logging.info("'%s' returned non-zero exit code!", executable)
      return False
  return True


def dispatch_post():
  ''' runs the post-suspend dispatchers '''
  for executable in get_executables(DISPATCHERS_DIRS_POST):
    logging.info("running '%s' as a post dispatcher", executable)
    call_dispatcher(executable)


def try_to_suspend():
  '''
  Top-level coordination to suspend the machine.

  I.e., run the pre-suspend dispatchers, suspend if the former succeed,
  run the post-suspend dispatchers.
  '''

  def _suspend_autodetect():
    '''
    tries to suspend by issuing the suspend commands specified in
    ``SUSPEND_COMMANDS`` one after the other
    '''

    for command in SUSPEND_COMMANDS:

      assert isinstance(command, tuple)

      str_command = " ".join(command)
      logging.debug("try to suspend via `%s`", str_command)
      try:
        if _call(command) == 0:
          return 0
        logging.debug("`%s`: returned a non-zero exit status", str_command)
      except FileNotFoundError:
        logging.debug("`%s`: command not found", str_command)

    logging.warning(
      "Suspend mechanism did not work. However, this program will "
      "continue as if the suspend worked in order not to run the "
      "dispatchers in fast loops. Maybe the next suspend works."
    )
    return 0

  if not dispatch_pre():
    return False

  if CONFIG['suspend_cmd'] == 'auto':
    return_value = _suspend_autodetect()
  else:
    return_value = _call([CONFIG['suspend_cmd']], shell=True)

  dispatch_post()

  return return_value == 0


def get_packets():
  '''
  returns the sum of the receive and send packet counters for the
  (either configured or automatically detected) network interface
  '''
  with open('/proc/net/dev', encoding="utf-8") as dev_file:
    for line in dev_file:
      line = line.strip()
      if not line.startswith(CONFIG['interface']):
        continue
      line_fields = line.split()

      # field 2 is receive counter, field 10 is send counter:
      return int(line_fields[2]) + int(line_fields[10])

  logging.critical(
    "Could not determine packet count for '%s'", CONFIG['interface']
  )
  logging.critical("Is this properly configured?")
  sys.exit(1)


def run_forever():
  '''
  top-level coordination to regularly check if to suspend
  '''

  measurements = deque()

  while True:

    time_now = time()
    packets_now = get_packets()

    measurements.append((time_now, packets_now))
    logging.debug("%i packets on %s", packets_now, ctime(time_now))

    while measurements:
      measurement_time, measurement_packets = measurements[0]

      # nothing to do if oldest measurement is younger than timeout
      if (time_now - measurement_time) < CONFIG['timeout']:
        logging.debug("Oldest measurement from %s younger than %i s",
                      ctime(measurement_time), CONFIG['timeout'])
        break

      packets_diff = packets_now - measurement_packets

      # delete oldest record if there has been more than threshold
      # network activity already
      if CONFIG['threshold'] < packets_diff:
        logging.debug("Enough network activity since %s "
                      "(%i < %i packets) – deleting record",
                      ctime(measurement_time),
                      CONFIG['threshold'], packets_diff)
        measurements.popleft()
        continue

      logging.info("Not enough network activity since %s "
                   "(%i > %i packets) – trying to suspend ...",
                   ctime(measurement_time),
                   CONFIG['threshold'], packets_diff)

      if try_to_suspend():
        logging.info("Suspend successful. Resetting ...")
        # We need to drop all measurements because otherwise – after
        # a suspend – we'd probably try to suspend again right away:
        measurements.clear()
      else:
        logging.info("Suspend unsuccessful. Going on ...")
        # At this point we know that the measurement is older than
        # timeout. Logically, it would be no problem to keep this
        # measurement, since it would be removed once there is either
        # more than ``threshold`` network activity or after a
        # successful suspend. However, in order not to leak memory, we
        # remove this measurement and consider the next one next time
        # this loop is being executed.
        measurements.popleft()

      # We also know, that we tried to suspend. Assuming the suspend
      # was successful, we can start over measuring after sleeping.
      # Assuming the suspend was unsuccessful, we want to avoid suspend
      # attempts in fast succession.
      # So in both cases, we want to break the loop:
      break

    assert len(measurements) <= \
           ceil(CONFIG['timeout'] / CONFIG['interval']), \
           ("after checking all measurements, there shouldn't be more "
            "in the deque than the number of measurements that can be "
            "captured during ``timeout`` with the corresponding "
            "``interval``")

    logging.debug("Going to sleep %i s until next check",
                  CONFIG['interval'])
    sleep(CONFIG['interval'])

def main():
  ''' top-level coordination of program execution '''

  chdir(dirname(sys.argv[0]) or '.')

  update_config_from_ini_file()
  update_config_from_args()
  setup_logging()
  detect_interface()

  logging.debug("Final config: %r", CONFIG)

  logging.info(
    "Will sleep after network activity less than %i packets in %i seconds on %s",
    CONFIG['threshold'], CONFIG['timeout'], CONFIG['interface']
  )

  logging.info("Initially run post suspend dispatchers")
  dispatch_post()

  run_forever()

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    print()
    logging.info('keyboard interrupt - bye')
    sys.exit(0)
